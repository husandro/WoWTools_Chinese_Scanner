--[[
( ) . % + - * ? [ ^ $
C_TooltipInfo.GetHyperlink('spell:'.. spellID)
C_TooltipInfo.GetHyperlink('unit:Creature-0-0-0-0-'..unit..'-0000000000')
C_TooltipInfo.GetHyperlink('item:207786:0:0:0:0:0:0:0')
C_TooltipInfo.GetHyperlink('quest:' .. questID)
]]





local addName= '|TInterface\\AddOns\\WoWTools_Chinese_Scanner\\Source\\WoWtools.tga:0:0|t'..'|cffff00ffWoW|r|cff00ff00Tools|r_|cff28a3ffChinese|r_数据扫描'
local Ver= GetBuildInfo()
local GameVer= math.modf(select(4, GetBuildInfo())/10000)--11

local MaxAchievementID= (GameVer-4)*10000-- 11.2.5 版本，最高61406 https://wago.tools/db2/Achievement
local MaxQuestID= GameVer*10000 --11.2.5 版本 93516
local MaxEncounterID= 25000

--local MaxSectionEncounterID= #DifficultyTab

--local MaxSectionEncounterMaxID= 
local MaxSectionEncounterID= (GameVer-7)*10000--11.2.5版本，最高33986 https://wago.tools/db2/JournalEncounterSection
local MaxUnitID= (GameVer-8)*100000--30w0000 11.25 最高 25w4359 https://wago.tools/db2/Creature
local MaxItemID= (GameVer-8)*100000--30w00000 11.2.5 最高 25w8483  https://wago.tools/db2/Item
local MaxSpellID=(GameVer-6)*100000-- 50w0000 229270


local MaxSpell2ID= (GameVer+2)*1000000--120w- 150w
local MinSpell2ID= 1200000
local Frame
local Buttons={}

local function Save()
    return WoWTools_SC
end








local ReceString={
    [ERR_TRAVEL_PASS_NO_INFO] = 1,--正在获取信息……
    [RETRIEVING_ITEM_INFO] = 1,--正在获取物品信息
    [RETRIEVING_TRADESKILL_INFO] = 1,--正在获取信息
    ['要求：']=1,
    ['暂无信息']=1,
}
local function IsCN(text)
    return
        text
        and text:find('[\228-\233]')
        and not text:find('DNT')
        and not text:find('UNUSED')
        and not ReceString[text]
end
local function MK(number)
    if number then
        local b=3
        local t=''
        if number>=1e7 then
            number= (number/1e9)
            t='|cffff00ffm|r'
            b=6
        elseif number>= 1e4 then
            number= (number/1e4)
            t='|cff00ff00w|r'
            b=4
        elseif number>=1e3 then
            number= (number/1e3)
            t='|cffffffffk|r'
        else
            return number..''
        end
        local num= format('%0.'..b..'f', number)
        return num:gsub('%.', t)
    end
end









local function Is_StopRun(self, startIndex, maxID)
    if self.isStop then
        self.Value:SetFormattedText(
            '|cffff8200暂停, %s条, %.1f%%',
            MK(startIndex),
            startIndex/maxID*100
        )
        self.Name:SetText(self.name)
        return true

    elseif (startIndex > maxID) then
        self.bar:SetValue(100)
        local clock= SecondsToClock(GetTime()-self.time)
        clock= clock:gsub('：', ':')
        self.Value:SetFormattedText(
            '|cffff00ff完成|r, %s条, %s',
            MK(self.num),
            clock
        )
        self.Name:SetText(self.name)
        Save()[self.name] = nil
        Save()[self.name..'Ver']= Ver
        Save()[self.name..'Time']= clock

        Save()[self.name..'Data']= Save()[self.name..'Data'] or {}
        if #Save()[self.name..'Data']>5 then
           table.remove(Save()[self.name..'Data'], #Save()[self.name..'Data'])
        end

        local t= date('%D')..' '.. date('%T')
            ..' 版本'..Ver..'|r'
            ..' |cffffffff'..MK(self.num)..'条|r'
            ..' 运行'..clock
        table.insert(Save()[self.name..'Data'], 1, t)

        self:settings()
        self.num= 0
        return true
    end
end
local function Set_ValueText(self, startIndex, maxID)
    Save()[self.name] = startIndex
    local va= startIndex/maxID*100
    local clock= SecondsToClock(GetTime()-self.time)
    clock= clock:gsub('：', ':')
    self.Value:SetFormattedText(
        '%s, %s条, %.1f%%',
        clock,
        MK(self.num),
        va
    )
    self.bar:SetValue(va)
end

local function Is_StopCahceRun(self, startIndex, maxID)
    if self.isCahceStop then
        print(addName, '|cffff0000停止|r, 获取“'..self.name..'”数据')
        self.bar2:Hide()
        self.bar2:SetValue(0)
        return true

    elseif (startIndex > maxID) then
        print(addName, '获取“'..self.name..'” 数据 |cnGREEN_FONT_COLOR:完成')
        self.bar2:SetValue(0)
        self.bar2:Hide()
        Save()[self.name..'Cache']= nil
        local clock= SecondsToClock(GetTime()-self.cahceTime)
        clock= clock:gsub('：', ':')
        Save()[self.name..'CacheTime']= clock
        self.isCahceStop= true
        self.cahce:settings()
        return true
    end
end












--https://wago.tools/db2/ItemSet
local ItemSetTab={
11729,11726,11728,11731,11730,
12940,12939,
13218,13183,
13390,13388,13391,13392,13389,
14637,14636,14640,14638,14641,
14631,14629,14632,14633,14626,
14614,14616,14615,14611,14612,
14624,14622,14620,14623,14621,
15053,15054,15055,
15056,15057,15058,21278,
15062,15063,
15066,15067,
10399,10403,10402,10401,10400,
10412,10411,10413,10410,6473,
10329,10332,10328,10331,10330,10333,
16685,16683,16686,16684,16687,16689,16688,16682,
16696,16691,16697,16693,16692,16695,16694,16690,
16702,16703,16699,16701,16700,16704,16698,16705,
16713,16711,16710,16721,16708,16709,16712,16707,
16716,16715,16714,16720,16706,16718,16719,16717,
16680,16675,16681,16677,16674,16678,16679,16676,
16673,16670,16671,16667,16672,16668,16669,16666,
16723,16725,16722,16726,16724,16728,16729,16727,
16736,16734,16735,16730,16737,16731,16732,16733,
16802,16799,16795,16800,16801,16796,16797,16798,
16811,16813,16817,16812,16814,16816,16815,16819,
16806,16804,16805,16810,16809,16807,16808,16803,
16827,16824,16825,16820,16821,16826,16822,16823,
16828,16829,16830,16833,16831,16834,16835,16836,
16851,16849,16850,16845,16848,16852,16846,16847,
16838,16837,16840,16841,16844,16839,16842,16843,
16858,16859,16857,16853,16860,16854,16855,16856,
16864,16861,16865,16863,16866,16867,16868,16862,
16818,16918,16912,16914,16917,16913,16915,16916,
16925,16926,16919,16921,16920,16922,16924,16923,
16933,16927,16934,16928,16930,16931,16929,16932,
16910,16906,16911,16905,16907,16908,16909,16832,
16903,16898,16904,16897,16900,16899,16901,16902,
16936,16935,16942,16940,16941,16939,16938,16937,
16944,16943,16950,16945,16948,16949,16947,16946,
16952,16951,16958,16955,16956,16954,16957,16953,
16959,16966,16964,16963,16962,16961,16965,16960,
7950,7948,7952,7951,7953,7949,
17082,17064,
18203,18202,
16509,16510,16513,16515,16514,16516,
16405,16406,16430,16431,16429,16432,
16519,16518,16522,16523,16521,16524,
12424,12426,12425,12422,12427,12429,12428,
16485,16487,16491,16490,16489,16492,
17616,17617,17612,17611,17613,17610,
16369,16391,16413,16414,16416,16415,
17594,17596,17600,17599,17598,17601,
17576,17577,17572,17571,17570,17573,
17562,17564,17568,17567,17569,17566,
16498,16499,16505,16508,16506,16507,
16392,16396,16417,16419,16420,16418,
16531,16530,16525,16527,16526,16528,
16425,16426,16401,16403,16428,16427,
16423,16424,16422,16421,16393,16397,
16494,16496,16504,16502,16503,16501,
16541,16542,16544,16545,16548,16543,
16477,16478,16480,16483,16484,16479,
16577,16578,16580,16573,16574,16579,
16536,16533,16535,16539,16540,16534,
16441,16444,16443,16437,16440,16442,
17604,17603,17605,17608,17607,17602,
17623,17625,17622,17624,17618,17620,
17586,17588,17593,17591,17590,17592,
17581,17580,17583,17584,17579,17578,
16563,16561,16562,16564,16560,16558,
16453,16457,16455,16446,16454,16456,
16466,16465,16468,16462,16463,16467,
16569,16571,16567,16565,16566,16568,
16452,16451,16449,16459,16448,16450,
16554,16555,16552,16551,16549,16550,
16410,16409,16433,16435,16434,16436,
16473,16474,16476,16472,16471,16475,
19682,19683,19684,
19685,19687,19686,
19688,19689,
19690,19691,19692,
19693,19694,19695,
19865,19866,
19893,19905,
19896,19910,
19873,19912,
19863,19920,
19898,19925,
20041,20048,20057,
20042,20049,20058,
20043,20050,20055,
20044,20051,20056,
20052,20045,20059,
20053,20046,20060,
20054,20047,20061,
19951,19577,19824,19823,19822,
19952,19588,19827,19826,19825,
19609,19956,19830,19829,19828,
19621,19953,19833,19832,19831,
19617,19954,19836,19835,19834,
19613,19955,19840,19839,19838,
19594,19958,19843,19842,19841,
19605,19957,19848,19849,20033,
19601,19959,19846,19845,20034,
20158,20154,20150,
20195,20199,20203,
20176,20159,20163,
20186,20190,20194,
20204,20208,20212,
20167,20171,20175,
16984,15050,15052,15051,
15045,15046,20296,
15048,20295,15049,
20406,20408,20407,
21355,21353,21354,21356,21357,
21408,21409,21407,
21394,21392,21393,
21331,21329,21333,21332,21330,
0,21359,21360,21361,21362,21364,
21405,21406,21404,
21337,21338,21335,21334,21336,
21416,21417,21418,
21372,21373,21374,21375,21376,
21400,21398,21399,
21344,21347,21346,21343,21345,
21414,21413,21415,
21389,21387,21388,21390,21391,
21397,21395,21396,
21349,21350,21348,21352,21351,
21410,21411,21412,
21366,21365,21370,21368,21367,
21403,21401,21402,
21994,21995,21996,21997,21998,21999,22000,22001,
22002,22003,22004,22005,22006,22007,22008,22009,
22106,22107,22108,22109,22110,22111,22112,22113,
22078,22079,22080,22081,22082,22083,22084,22085,
22010,22011,22061,22013,22015,22016,22017,22060,
22086,22087,22088,22089,22090,22091,22092,22093,
22062,22063,22064,22065,22066,22067,22068,22069,
22070,22071,22072,22073,22074,22075,22076,22077,
22095,22096,22097,22098,22099,22100,22101,22102,
22306,22311,22313,22302,22304,22305,22303,22301,
22492,22494,22493,22490,22489,22491,22488,22495,23064,
22864,22856,22879,22880,23257,23258,
22423,22416,22421,22422,22418,22417,22419,22420,23059,
22483,22476,22481,22478,22477,22479,22480,22482,23060,
22518,22519,22514,22517,22513,22512,22516,22515,23061,
22502,22503,22498,22501,22497,22496,22500,22499,23062,
22468,22470,22469,22466,22465,22467,22464,22471,23065,
22430,22431,22426,22428,22427,22429,22425,22424,23066,
22510,22511,22506,22509,22505,22504,22508,22507,23063,
22440,22442,22441,22438,22437,22439,22436,22443,23067,
23090,23087,23078,
23081,23089,23093,
23088,23082,23092,
23091,23084,23085,
22868,22858,22872,22873,23244,23243,
22857,22867,22876,22887,23259,23260,
22863,22852,22877,22878,23253,23254,
22869,22859,22882,22885,23261,23262,
22865,22855,23255,23256,22881,22884,
22870,22860,23263,23264,22883,22886,
22843,22862,23251,23252,22874,22875,
23272,23273,23274,23275,23276,23277,
23300,23301,23286,23287,23314,23315,
23304,23305,23290,23291,23318,23319,
23296,23297,23282,23283,23310,23311,
23298,23299,23284,23285,23312,23313,
23302,23303,23288,23289,23316,23317,
23292,23293,23278,23279,23306,23307,
23294,23295,23280,23281,23308,23309,
21848,21847,21846,
21871,21869,21870,
21875,21874,21873,
21855,21854,21852,21851,21849,21853,21850,
21862,21861,21859,21860,
21865,21864,21863,
21868,21866,21867,
24266,24262,
23489,23488,23487,23482,23484,
23490,23491,23493,23494,
23507,23508,23506,
23509,23512,23511,23510,
23513,23516,23514,23515,
23523,23525,23524,
23522,23521,23520,33173,
24544,24549,24545,24547,24546,
24556,24553,24555,24554,24552,
23519,23518,23517,
24255,24249,
24264,24261,
24267,24263,
25685,25686,25687,
25691,25690,25689,
25695,25697,25696,
25694,25693,25692,
25834,25833,25830,25832,25831,
25997,26000,25998,26001,25999,
25854,25855,25857,25856,25858,
27469,27470,27471,27472,27473,
27707,27708,27709,27710,27711,
27702,27703,27704,27705,27706,
27879,27880,27881,27882,27883,
28126,28127,28128,28129,28130,
28136,28137,28138,28139,28140,
28334,28335,28331,28332,28333,
28831,28832,28833,28834,28835,
28851,28852,28853,28854,28855,
28679,28680,28681,28724,28683,
28699,28700,28701,28702,28703,
28624,28625,28626,28627,28628,
28817,28818,28819,28820,28821,
28689,28690,28691,28692,28693,
28841,28842,28843,28844,28845,
28613,28614,28615,28616,28617,
28805,28806,28807,28808,28809,
28704,28705,28706,28707,28708,
28856,28857,28858,28859,28860,
28714,28715,28716,28717,28718,
28866,28867,28868,28869,28870,
28618,28619,28620,28622,28623,
28811,28812,28813,28814,28815,
28694,28695,28696,28697,28698,
28846,28847,28848,28849,28850,
28684,28685,28686,28687,28688,
28836,28837,28838,28839,28840,
28709,28710,28711,28712,28713,
28861,28862,28863,28864,28865,
28719,28720,28721,28722,28723,
28871,28872,28873,28874,28875,
25657,25656,25655,25654,
25661,25659,25662,25660,
25668,25669,25670,25671,
25673,25674,25675,25676,
30186,30187,30188,30200,30201,
29516,29517,29515,
29521,29520,29519,
29523,29524,29522,
29527,29526,29525,
27509,28414,27908,27776,28204,
29046,29045,29044,29048,29047,
30144,30145,30146,30148,30149,
28203,27535,28285,27839,27739,
29062,29061,29065,29063,29064,
29066,29068,29067,29069,29070,
29071,29073,29072,29074,29075,
30134,30135,30136,30137,30138,
30123,30125,30124,30126,30127,
30129,30130,30132,30133,30131,
28231,27510,28349,27909,27802,
29032,29029,29028,29030,29031,
29033,29035,29034,29036,29037,
29038,29039,29040,29043,29042,
30164,30165,30166,30167,30168,
30169,30170,30171,30172,30173,
30185,30189,30190,30192,30194,
28348,27468,27873,28202,27737,
29087,29086,29090,29088,29089,
29093,29094,29091,29092,29095,
29096,29097,29099,29100,29098,
30222,30223,30228,30229,30230,
30216,30217,30219,30220,30221,
30231,30232,30233,30234,30235,
27537,28415,28232,27778,27948,
28963,28968,28966,28967,28964,
30211,30212,30213,30215,30214,
28278,27508,27738,28229,27838,
29076,29080,29078,29079,29077,
30206,30205,30207,30210,30196,
28228,27474,28275,27874,27801,
29085,29081,29083,29082,29084,
30139,30140,30141,30142,30143,
28205,27475,27977,27803,28350,
29012,29011,29017,29015,29016,
29021,29019,29020,29022,29023,
30113,30115,30114,30116,30117,
30120,30118,30119,30121,30122,
28193,27465,27907,28191,27796,
28264,27531,28224,27837,27797,
27936,28401,27528,28192,27713,
28403,27497,28225,27870,27771,
28413,28230,27536,27775,27875,
29055,29049,29054,29050,29053,
29057,29059,29056,29058,29060,
30153,30152,30151,30154,30150,
30160,30161,30162,30159,30163,
31339,31338,
31028,31026,31027,31029,31030,34575,34448,34558,
31004,31001,31003,31005,31006,34549,34443,34570,
31050,31051,31053,31054,31052,34564,34436,34541,
31056,31055,31058,31059,31057,34574,34447,34557,
30972,30975,30969,30977,30979,34546,34441,34569,
30976,30974,30970,30978,30980,34568,34442,34547,
31061,31064,31067,31070,31065,34434,34528,34563,
31068,31063,31060,31069,31066,34562,34527,34435,
31042,31034,31039,31044,31048,34556,34444,34573,
31043,31035,31040,31046,31049,34572,34446,34555,
31041,31032,31037,31045,31047,34571,34445,34554,
30991,30987,30985,30995,30998,34488,34433,34560,
30990,30982,30993,30997,30989,34561,34431,34485,
30992,30983,30988,30994,30996,34432,34487,34559,
31018,31011,31015,31021,31024,34567,34439,34545,
31016,31007,31012,31019,31022,34543,34438,34565,
31017,31008,31014,31020,31023,34542,34437,34566,
31375,31376,31377,31378,31379,
31396,31397,31400,31406,31407,
31409,31410,31411,31412,31413,
31589,31590,31591,31592,31593,
31584,31585,31586,31587,31588,
31613,31614,31616,31618,31619,
31622,31623,31620,31624,31625,
31626,31627,31621,31628,31629,
31630,31631,31632,31633,31634,
31635,31636,31637,31638,31639,
31640,31641,31642,31643,31644,
31646,31647,31648,31649,31650,
29600,29601,29602,29603,29604,29605,
29612,29613,29614,29615,29616,29617,
32838,32837,
29608,29606,29611,29609,29607,29610,
29599,29595,29597,29596,29598,29594,
32946,32945,
34703,28189,
35328,35329,35330,35331,35332,
35333,35334,35335,35336,35337,
35338,35339,35340,35341,35342,
35343,35344,35345,35346,35347,
35356,35357,35358,35360,35359,
35371,35372,35373,35375,35374,
35361,35362,35363,35365,35364,
35366,35367,35368,35369,35370,
35386,35387,35388,35389,35390,
35391,35392,35393,35394,35395,
35381,35382,35383,35384,35385,
35376,35377,35378,35379,35380,
35407,35408,35409,35410,35411,
35402,35403,35404,35405,35406,
35412,35413,35414,35415,35416,
38405,38404,38400,38403,38401,38402,38437,38433,
38418,38419,38420,38421,38422,38417,38439,38435,
38412,38413,38414,38415,38416,38424,38436,38440,
38406,38407,38408,38409,38410,38411,38434,38438,
37758,37821,
40440,40441,40442,40443,40444,
151792,21525,151790,21524,151791,
33862,33863,33868,33966,33969,33967,33864,33968,
41522,41520,44211,41521,41519,41515,41513,41512,
41543,41544,41545,41546,41548,41549,41550,41551,
42625,42626,42627,42628,42629,
42630,42631,42632,42633,42634,
42635,42636,42637,42638,42639,
42654,42655,42656,42657,42658,
42659,42660,42661,42662,42663,
42669,42670,42671,42672,42673,
42664,42665,42666,42667,42668,
42674,42675,42676,42677,42678,
42680,42681,42682,42683,42684,
42685,42686,42687,42688,42689,
42690,42691,42692,42693,42694,
42695,42696,42697,42698,42699,
42703,42704,42705,42706,42707,
42708,42709,42710,42711,42712,
42713,42714,42715,42716,42717,
42718,42719,42720,42721,42722,
43073,43074,43075,43072,
43078,43077,43079,43076,
43082,43081,43083,43080,
43070,43068,43071,43069,
23324,34685,34683,
43740,43742,43743,43745,43747,
43739,43744,43746,43741,43748,
43794,43796,43801,43803,43805,
43797,43798,43800,43806,43807,
43793,43795,43799,43802,43804,
43809,43813,43815,43817,43819,
43811,43812,43814,43816,43818,
43734,43735,43736,43737,43738,
43762,43763,43765,43772,43776,
43764,43767,43769,43770,43773,
43766,43768,43771,43774,43775,
43751,43753,43756,43822,43758,
43752,43754,43755,43759,43820,
43749,43750,43757,43760,43761,
43727,43728,43729,43730,43731,
43787,43788,43789,43790,43791,
43777,43778,43779,43780,43781,
43733,43782,43784,43808,43810,
43732,43783,43785,43786,43792,
151804,6833,
43435,43434,43260,43436,43438,43433,43439,43437,
42723,42724,42725,42726,42727,42728,42730,42729,
43266,43273,43264,43263,43265,43261,43271,43262,
41354,41349,41353,41347,41351,41350,41352,41348,
43450,43455,43454,43453,43456,43457,43451,43452,
43442,43443,43444,43446,43445,43447,43448,43449,
43969,43970,43974,43971,41516,43975,43972,43973,
46213,46216,46221,46224,46226,
46214,46215,46219,46222,46225,
46217,46218,46220,46227,46228,
46293,46294,46296,46303,46307,
46295,46298,46300,46301,46304,
46297,46299,46302,46305,46306,
46288,46289,46290,46291,46292,
46260,46262,46265,46267,46269,
45350,46309,46266,46271,46272,
46261,46263,46264,46268,46270,
46278,46280,46282,46285,46287,
46279,46281,46283,46284,46286,
46230,46248,46255,46256,46257,
46231,46247,46254,46258,46259,
46232,46235,46237,46239,46241,
46233,46234,46236,46238,46240,
46249,46250,46251,46252,46253,
46242,46243,46244,46245,46246,
46273,46274,46275,46276,46277,
47164,47166,47163,
48725,48726,48727,48728,48729,
48730,48731,48732,48733,48734,
48735,48736,48737,48738,48739,
48740,48741,48742,48743,48744,
48745,48746,48747,48748,48749,
48750,48751,48752,48753,48754,
48755,48756,48757,48758,48759,
48760,48761,48762,48763,48764,
48774,48775,48776,48777,48778,
48769,48770,48771,48772,48773,
48786,48787,48788,48789,48790,
48781,48782,48783,48784,48785,
48799,48800,48801,48802,48803,
48794,48795,48796,48797,48798,
48809,48810,48811,48812,48813,
48804,48805,48806,48807,48808,
48819,48820,48821,48822,48823,
48814,48815,48816,48817,48818,
48824,48825,48826,48827,48828,
48829,48830,48831,48832,48833,
48841,48842,48843,48844,48845,
48836,48837,48838,48839,48840,
48846,48847,48848,48849,48850,
48854,48855,48852,48853,48851,
48865,48866,48867,48868,48869,
48860,48861,48862,48863,48864,
48875,48876,48877,48878,48879,
48870,48871,48872,48873,48874,
48885,48886,48887,48888,48889,
48880,48881,48882,48883,48884,
48895,48896,48897,48898,48899,
48890,48891,48892,48893,48894,
48904,48903,48902,48901,48900,
48909,48908,48907,48906,48905,
48915,48916,48917,48918,48919,
48910,48911,48912,48913,48914,
48927,48928,48929,48930,48931,
48922,48923,48924,48925,48926,
49310,49463,
49488,49464,
51716,51715,51714,51713,51712,
51766,51765,51764,51763,51762,
51732,51733,51734,51735,51736,
51741,51740,51739,51738,51737,
51696,51695,51694,51693,51692,
51706,51705,51704,51703,51702,
51701,51700,51699,51698,51697,
51746,51745,51744,51743,51742,
51711,51710,51709,51708,51707,
51747,51748,51749,51750,51751,
51757,51758,51759,51760,51761,
51752,51753,51754,51755,51756,
51771,51770,51769,51768,51767,
51776,51775,51774,51773,51772,
51686,51685,51684,51683,51682,
51691,51690,51689,51688,51687,
51726,51725,51724,51723,51722,
51721,51720,51719,51718,51717,
51731,51730,51729,51728,51727,
20184,20177,20181,
64947,64946,64945,64944,64943,
64977,64976,64975,64974,64973,
65156,65155,65154,65153,65152,
64962,64961,64960,64959,64958,
65151,65150,65149,65148,65147,
64967,64966,64965,64964,64963,
64942,64941,64940,64939,64938,
64957,64956,64955,64954,64953,
64937,64936,64935,64934,64933,
64952,64951,64950,64949,64948,
64932,64931,64930,64929,64928,
64992,64991,64990,64989,64988,
64927,64926,64925,64924,64923,
64987,64986,64985,64984,64983,
64972,64971,64970,64969,64968,
64982,64981,64980,64979,64978,
60339,60340,60341,60342,60343,
60349,60350,60351,60352,60353,
60290,60286,60288,60287,60289,
60280,60277,60278,60276,60279,
60284,60281,60283,60282,60285,
60306,60305,60303,60307,60304,
60246,60244,60245,60243,60247,
60348,60347,60346,60345,60344,
60362,60361,60359,60363,60360,
60358,60357,60356,60355,60354,
60262,60259,60261,60258,60275,
60253,60254,60255,60256,60257,
60302,60300,60299,60298,60301,
60311,60310,60308,60312,60309,
60322,60321,60320,60319,60318,
60317,60316,60315,60314,60313,
60252,60251,60250,60249,60248,
60327,60324,60325,60326,60323,
60331,60330,60328,60332,60329,
54486,54485,54484,54483,54482,54481,54480,54479,
54478,54477,54476,54475,54474,54473,54472,54471,
56513,56509,56505,56499,56495,56491,56484,56483,
56512,56508,56504,56498,56494,56490,56482,56481,
63538,63537,
70010,70005,70011,70004,70006,70007,70008,70009,
70018,70013,70019,70012,70014,70015,70016,70017,
70020,70021,70022,70023,70024,70025,70026,70027,
70028,70029,70030,70031,70032,70033,70034,70035,
70036,70037,70038,70039,70040,70041,70042,70043,
70044,70045,70046,70047,70048,70049,70050,70051,
70062,70061,70063,70070,70067,70065,70066,70060,70064,
70052,70053,70054,70055,70056,70057,70058,70059,
71058,71059,71060,71061,71062,
70951,70952,70953,70954,70955,
71097,71098,71099,71100,71101,
71107,71108,71109,71110,71111,
71102,71103,71104,71105,71106,
71050,71051,71052,71053,71054,
71045,71046,71047,71048,71049,
71290,71286,71287,71288,71289,
71281,71283,71282,71284,71285,
71271,71272,71273,71274,71275,
71280,71279,71278,71277,71276,
71095,71094,71093,71092,71091,
71067,71066,71065,71064,71063,
70946,70947,70948,70949,70950,
71300,71299,71298,71297,71296,
71305,71304,71303,71302,71301,
71295,71294,71293,71292,71291,
71072,71071,71069,71068,71070,
70941,70942,70944,70943,70945,
77008,77009,77010,77011,77012,
76974,76975,76976,76977,76978,
77013,77014,77015,77016,77017,
77018,77019,77020,77021,77022,
76749,76750,76751,76752,76753,
77028,77029,77030,77031,77032,
76212,76213,76214,76215,76216,
76765,76766,76767,76768,76769,
76874,76875,76876,76877,76878,
77003,77004,77005,77006,77007,
76357,76358,76359,76360,76361,
76348,76347,76346,76345,76344,
77023,77024,77025,77026,77027,
76756,76757,76758,76759,76760,
77039,77038,77037,77036,77035,
77040,77041,77042,77043,77044,
76343,76342,76341,76340,76339,
76983,76984,76985,76986,76987,
76988,76989,76990,76991,76992,
77949,77950,
77947,77948,
77945,77946,
88191,88192,88193,88194,88195,
88201,88202,88203,88204,88205,
88186,88187,88188,88189,88190,
88256,88257,88258,88259,88260,
88181,88182,88183,88184,88185,
88253,88252,88255,88254,88251,
88226,88227,88228,88229,88230,
88246,88247,88248,88249,88250,
88221,88222,88223,88225,88224,
88210,88206,88207,88208,88209,
88236,88237,88238,88239,88240,
88211,88212,88213,88214,88215,
88216,88217,88218,88219,88220,
88198,88197,88200,88199,88196,
88231,88232,88233,88234,88235,
88176,88177,88178,88179,88180,
88171,88172,88173,88174,88175,
88575,88574,88573,88572,88571,88570,88569,88568,
85334,85335,85336,85337,85338,
85314,85315,85316,85317,85318,
85354,85355,85356,85357,85358,
85304,85305,85306,85307,85308,
85309,85310,85311,85312,85313,
85383,85382,85381,85380,85379,
85294,85295,85296,85297,85298,
85374,85375,85376,85377,85378,
85393,85392,85391,85390,85389,
85398,85397,85396,85395,85394,
85384,85385,85386,85387,85388,
85344,85345,85346,85347,85348,
85339,85340,85341,85342,85343,
85319,85320,85321,85322,85323,
85359,85360,85361,85362,85363,
85368,85367,85366,85365,85364,
85299,85300,85301,85302,85303,
85349,85350,85351,85352,85353,
85293,85292,85291,85290,85289,
85284,85285,85286,85287,85288,
85373,85372,85371,85370,85369,
85329,85330,85331,85332,85333,
85324,85325,85326,85327,85328,
88241,88242,88243,88245,88244,
86468,86559,86558,
95230,95231,95232,95233,95234,
95225,95226,95227,95228,95229,
95235,95236,95237,95238,95239,
95240,95241,95242,95243,95244,
95245,95246,95247,95248,95249,
95250,95251,95252,95253,95254,
95255,95256,95257,95258,95259,
95260,95261,95262,95263,95264,
95265,95266,95267,95268,95269,
95270,95271,95272,95273,95274,
95275,95276,95277,95278,95279,
95280,95281,95282,95283,95284,
95285,95286,95287,95288,95289,
95290,95291,95292,95293,95294,
95295,95296,95297,95298,95299,
95300,95301,95302,95303,95304,
95305,95306,95307,95308,95309,
95310,95311,95312,95313,95314,
95315,95316,95317,95318,95319,
95320,95321,95322,95323,95324,
95325,95326,95327,95328,95329,
95330,95331,95332,95333,95334,
95335,95336,95337,95338,95339,
99195,99196,99201,99202,99203,
99197,99198,99199,99200,99206,
99096,99097,99098,99204,99205,
99092,99093,99094,99095,99106,
99101,99102,99103,99104,99105,
99099,99100,99107,99108,99109,
99113,99112,99114,99115,99116,
99123,99110,99111,99121,99122,
99117,99118,99119,99120,99131,
99126,99127,99128,99129,99130,
99133,99124,99125,99134,99135,
99132,99136,99137,99138,99139,
99142,99143,99144,99140,99141,
99151,99147,99148,99149,99150,
99154,99155,99156,99145,99146,
99152,99153,99160,99161,99162,
99157,99158,99159,99167,99168,
99163,99164,99165,99166,99170,
99169,99174,99175,99176,99177,
99171,99172,99173,99178,99185,
99180,99181,99182,99183,99184,
99186,99187,99192,99193,99194,
99179,99188,99189,99190,99191,
102481,102480,
109278,109379,
127049,127071,127082,127093,127104,
127063,127072,127083,127094,127105,
127050,127073,127084,127095,127106,
127064,127074,127085,127096,127107,
127051,127075,127086,127097,127108,
127052,127076,127087,127098,127109,
127065,127077,127088,127099,127110,
127053,127078,127089,127100,127111,
127054,127079,127090,127101,127112,
127066,127080,127091,127102,127113,
127055,127081,127092,127103,127114,
111305,111306,
115540,115541,115542,115543,115544,
115535,115536,115537,115538,115539,
115550,115551,115552,115553,115554,
115545,115546,115547,115548,115549,
115555,115556,115557,115558,115559,
115565,115566,115567,115568,115569,
115560,115561,115562,115563,115564,
115570,115571,115572,115573,115574,
115575,115576,115577,115578,115579,
115580,115581,115582,115583,115584,
115585,115586,115587,115588,115589,
118256,118257,
120396,120395,120394,120393,120392,120391,
120390,120389,120388,120387,120386,120385,
120384,120383,120382,120381,120380,120379,
120378,120377,120376,120375,120374,120373,
124317,124327,124332,124338,124344,
124246,124255,124261,124267,124272,
124154,124160,124165,124171,124177,
124247,124256,124262,124268,124273,
124284,124292,124296,124301,124307,
124318,124328,124333,124339,124345,
124155,124161,124166,124172,124178,
124248,124257,124263,124269,124274,
124293,124297,124302,124303,124308,
124319,124329,124334,124340,124346,
124156,124162,124167,124173,124179,
128052,128136,128128,128129,128124,128120,
128125,128054,128137,128130,128131,128121,
128126,128080,128138,128132,128133,128122,
128127,128032,128139,128134,128135,128123,
112458,129181,
128956,132243,
132741,132739,132743,132742,132740,
139673,139674,139675,139676,139677,139678,139679,139680,
139715,139716,139717,139718,139719,139720,139721,139722,
139723,139724,139725,139726,139727,139728,139729,139730,
139707,139708,139709,139710,139711,139712,139713,139714,
139751,139747,139748,139749,139750,139752,139753,139754,
139731,139732,139733,139734,139735,139736,139737,139738,
139690,139691,139692,139693,139694,139695,139696,139697,
139759,139755,139756,139757,139758,139760,139761,139762,
139739,139740,139741,139742,139743,139744,139745,139746,
139698,139699,139700,139701,139702,139703,139704,139705,
139767,139763,139764,139765,139766,139768,139769,139770,
139681,139682,139683,139684,139685,139686,139687,139688,
138349,138352,138355,138358,138361,138364,
138375,138376,138377,138378,138379,138380,
138324,138327,138330,138333,138336,138366,
138339,138340,138342,138344,138347,138368,
138309,138312,138315,138318,138321,138365,
138325,138328,138331,138334,138337,138367,
138350,138353,138356,138359,138362,138369,
138310,138313,138316,138319,138322,138370,
138326,138329,138332,138335,138338,138371,
138341,138343,138345,138346,138348,138372,
138311,138314,138317,138320,138323,138373,
138351,138354,138357,138360,138363,138374,
134529,134533,
137419,137487,
134432,134424,
137480,137397,
134480,137405,
134518,134503,
142207,142215,
147121,147122,147123,147124,147125,147126,
147127,147128,147129,147130,147131,147132,
147133,147134,147135,147136,147137,147138,
147139,147140,147141,147142,147143,147144,
147145,147146,147147,147148,147149,147150,
147151,147152,147153,147154,147155,147156,
147157,147158,147159,147160,147161,147162,
147163,147164,147165,147166,147167,147168,
147169,147170,147171,147172,147173,147174,
147175,147176,147177,147178,147179,147180,
147181,147182,147183,147184,147185,147186,
147187,147188,147189,147190,147191,147192,
152178,152179,152180,152181,152182,152183,
152172,152173,152174,152175,152176,152177,
152166,152167,152168,152169,152170,152171,
152160,152161,152162,152163,152164,152165,
152154,152155,152156,152157,152158,152159,
152148,152149,152150,152151,152152,152153,
152142,152143,152144,152145,152146,152147,
152136,152137,152138,152139,152140,152141,
152130,152131,152132,152133,152134,152135,
152124,152125,152126,152127,152128,152129,
152118,152119,152120,152121,152122,152123,
152112,152113,152114,152115,152116,152117,
151308,151311,
151303,151299,151302,
161022,161021,161020,161019,161018,
161025,161024,
161030,161029,161028,161027,161026,
161035,161034,161033,161032,161031,
161040,161039,161038,161037,161036,
161041,161042,161043,161044,
158362,159631,
163949,163954,
165567,165512,
165604,165566,
174500,174528,
181865,181864,
183143,183144,183145,183146,183147,183148,183149,
181192,182719,182720,182721,182722,182723,182724,182725,
184194,184195,
184268,184269,
178154,178161,178156,178159,178153,178157,178158,178155,178160,
182276,182274,182268,182271,182272,182273,182270,182269,182275,
175597,175588,175603,179623,175586,175592,175576,175581,175600,179657,
180934,180911,180913,180917,180922,180925,180906,180901,180928,
184105,184106,184108,184107,
177050,177051,177052,177053,177054,177055,177056,177057,177058,
179940,179941,179942,179943,179944,179945,179946,179947,179948,
174289,174290,174291,174292,174293,174294,174295,174296,174297,
182259,182260,182261,182262,182263,182264,182265,182266,182267,
182277,182278,182279,182280,182281,182282,182283,182284,182285,
182250,182251,182252,182253,182254,182255,182256,182257,182258,
179765,179766,179767,179768,179769,179770,179771,179772,179773,179774,
181877,181909,181910,181911,181912,181913,181914,181915,181916,181979,
179620,179887,179888,179889,179890,179891,179892,179893,179894,
180904,180908,180909,180915,180919,180920,180927,180931,180936,
180903,180907,180912,180914,180918,180923,180926,180930,180937,
180900,180902,180905,180910,180916,180921,180924,180929,180938,
188901,188902,188903,188905,188907,
0,188861,188860,188859,188858,188856,
0,188933,188932,188931,188929,188928,
0,188925,188924,188923,188922,188920,
0,188868,188867,188866,188864,188863,
0,188898,188896,188894,188893,188892,
0,188853,188851,188849,188848,188847,
0,188845,188844,188843,188842,188839,
0,188916,188914,188912,188911,188910,
0,188881,188880,188879,188878,188875,
0,188942,188941,188940,188938,188937,
0,188890,188889,188888,188887,188884,
190124,190125,
193454,193458,193457,
193463,193465,193459,
198572,198571,198570,198569,198568,198567,198566,198565,
198596,198595,198594,198593,198592,198591,198590,198589,
198580,198579,198578,198577,198576,198575,198574,198573,
198588,198587,198586,198585,198584,198583,198582,198581,
193527,193537,193512,
193536,193525,193520,
193531,193535,
199417,199418,199419,199420,199421,199424,199422,199423,
199431,199425,199426,199427,199428,199432,199429,199430,
199441,199442,199443,199444,199445,199446,199447,199448,
199434,199435,199436,199433,199437,199438,199439,199440,
200405,200407,200408,200409,200410,
200342,200344,200345,200346,200347,
200351,200353,200354,200355,200356,
200387,200389,200390,200391,200392,
200378,200380,200381,200382,200383,
200315,200317,200318,200319,200320,
200360,200362,200363,200364,200365,
200414,200416,200417,200418,200419,
200326,200327,200328,200324,200329,
200369,200371,200372,200373,200374,
200396,200398,200399,200400,200401,
200335,200336,200337,200333,200338,
200423,200425,200426,200427,200428,
204811,204810,
202464,202462,202461,202460,202459,
202527,202525,202524,202523,202522,
202518,202516,202515,202514,202513,
202491,202489,202488,202487,202486,
202482,202480,202479,202478,202477,
202554,202552,202551,202550,202549,
202509,202507,202506,202505,202504,
202455,202453,202452,202451,202450,
202543,202542,202541,202545,202540,
202500,202498,202497,202496,202495,
202473,202471,202470,202469,202468,
202534,202533,202532,202536,202531,
202446,202444,202443,202442,202441,
206213,206212,206210,206209,206208,206207,206206,206205,
206237,206236,206235,206234,206233,206232,206231,206230,
206221,206220,206219,206218,206217,206216,206215,206214,
206229,206228,206227,206226,206225,206224,206223,206222,
207198,207199,207200,207201,207203,
207261,207262,207263,207264,207266,
207252,207253,207254,207255,207257,
207225,207226,207227,207228,207230,
207216,207217,207218,207219,207221,
207288,207289,207290,207291,207293,
207243,207244,207245,207246,207248,
207189,207190,207191,207192,207194,
207279,207280,207281,207282,207284,
207234,207235,207236,207237,207239,
207207,207208,207209,207210,207212,
207270,207271,207272,207273,207275,
207180,207181,207182,207183,207185,
211234,211233,211232,211231,211230,211229,211228,211227,
211242,211241,211240,211239,211237,211236,211235,211238,
211226,211225,211224,211223,211222,211221,211220,211219,
211218,211217,211216,211215,211214,211213,211212,211211,
217176,217177,217178,217179,217180,
217181,217182,217183,217184,217185,
217186,217187,217188,217189,217190,
217191,217192,217193,217194,217195,
217196,217197,217198,217199,217200,
217201,217202,217203,217205,217204,
217206,217207,217208,217209,217210,
217211,217212,217213,217215,217214,
217216,217217,217218,217219,217220,
217221,217222,217223,217224,217225,
217226,217227,217228,217229,217230,
217235,217231,217232,217233,217234,
217236,217237,217238,217239,217240,
219507,219508,219509,
219512,219513,219511,
219877,212456,
217092,217091,217090,217089,217088,217087,217086,217085,
217100,217099,217098,217097,217096,217095,217094,217093,
217084,217083,217082,217081,217080,217079,217078,217077,
217076,217075,217074,217073,217072,217071,217070,217069,
222807,222808,
211987,211985,211984,211983,211982,
212075,212074,212073,212077,212072,
212014,212012,212011,212010,212009,
212041,212039,212038,212037,212036,
212084,212083,212082,212086,212081,
211996,211994,211993,211992,211991,
212050,212048,212047,212046,212045,
212095,212093,212092,212091,212090,
212023,212021,212020,212019,212018,
212032,212030,212029,212028,212027,
212059,212057,212056,212055,212054,
212068,212066,212065,212064,212063,
212005,212003,212002,212001,212000,
222809,222810,
231433,231428,
229256,229254,229253,229252,229251,
229319,229317,229316,229315,229314,
229310,229308,229307,229306,229305,
229283,229281,229280,229279,229278,
229274,229272,229271,229270,229269,
229346,229344,229343,229342,229341,
229301,229299,229298,229297,229296,
229247,229245,229244,229243,229242,
229337,229335,229334,229333,229332,
229292,229290,229289,229288,229287,
229265,229263,229262,229261,229260,
229326,229325,229324,229328,229323,
229238,229236,229235,229234,229233,
237631,237629,237628,237627,237626,
237694,237692,237691,237690,237689,
237685,237683,237682,237681,237680,
237658,237656,237655,237654,237653,
237649,237647,237646,237645,237644,
237721,237719,237718,237717,237716,
237676,237674,237673,237672,237671,
237622,237620,237619,237618,237617,
237710,237709,237708,237712,237707,
237667,237665,237664,237663,237662,
237640,237638,237637,237636,237635,
237701,237700,237699,237703,237698,
237613,237611,237610,237609,237608,
237730,242392,237728,237735,
224288,
}












--Encounter [字符journalEncounterID]= {T=, D=}
local function Save_Encounter(self, journalEncounterID)
    local name, desc
    local n, d, _, _, link = EJ_GetEncounterInfo(journalEncounterID)
    if IsCN(n) then
        name= n
    end
    if IsCN(d) then
        desc= d
    end
    if name or desc then
        WoWTools_SC_Encounter[journalEncounterID] = {
            ['T']=name,
            ['D']=desc
        }
        self.num= self.num+1
        return link or name
    end
    
end

local function S_Encounter(self, startIndex)
    if Is_StopRun(self, startIndex, MaxEncounterID) then
        return
    end
    for journalEncounterID = startIndex, startIndex + 100 do
        local link= Save_Encounter(self, journalEncounterID)
        if link then
            self.Name:SetText(link)
        end
    end
    Set_ValueText(self, startIndex, MaxEncounterID)
    Save()[self.name] = startIndex
    C_Timer.After(0.1, function() S_Encounter(self, startIndex + 100 + 1) end)
end

























--EncounterSection [字符sectionIDxdifficultyID]= {T=, D=}
local function Save_SectionEncounter(self, sectionID, difficultyID)
    do
        if EJ_GetDifficulty()~=difficultyID then
            EJ_SetDifficulty(difficultyID)
        end
    end

    local sectionInfo = C_EncounterJournal.GetSectionInfo(sectionID)
    if sectionInfo and not sectionInfo.filteredByDifficulty then
        local title, desc
        if IsCN(sectionInfo.title) then
            title= sectionInfo.title
        end
        if IsCN(sectionInfo.description) then
            desc= sectionInfo.description
        end
        if title or desc then
            local t= EJ_GetDifficulty()..'x'..sectionID
            WoWTools_SC_SectionEncounter[t]={
                T=title,
                D= desc,
            }
            self.num= self.num + 1
            return sectionInfo.link or title
        end
    end
end


local function S_SectionEncounter(self, startIndex)
    if Is_StopRun(self, startIndex, MaxSectionEncounterID) then
        return
    end
    for difficultyID= 1, 45 do--in pairs({16, 15, 14, 17}) do-- 16史诗 15英雄 14普通 17随机
        for sectionID =startIndex, startIndex + 100 do
            local link= Save_SectionEncounter(self, sectionID, difficultyID)
            if link then
                self.Name:SetText(link)
            end
        end
    end
    Set_ValueText(self, startIndex, MaxSectionEncounterID)
    Save()[self.name] = startIndex

    C_Timer.After(0.1, function() S_SectionEncounter(self, startIndex + 100+ 1) end)
end
--[[
local function S_SectionEncounter(self, startIndex, counter)
    counter= counter or 0

    if Is_StopRun(self, startIndex, MaxSectionEncounterID) then
        return
    end

    for difficultyID = 1, 45 do
        EJ_SetDifficulty(difficultyID)
        for sectionID = startIndex, startIndex + 100 do
            local sectionInfo = C_EncounterJournal.GetSectionInfo(sectionID)
            if sectionInfo  and not sectionInfo.filteredByDifficulty then
                local title, desc
                if IsCN(sectionInfo.title) then
                    title= sectionInfo.title
                end
                if IsCN(sectionInfo.description) then
                    desc= sectionInfo.description
                end
                if title or desc then
                    WoWTools_SC_SectionEncounter[sectionID]= WoWTools_SC_SectionEncounter[sectionID] or {}
                    if title then
                        WoWTools_SC_SectionEncounter[sectionID].T= title
                    end
                    if desc then
                        WoWTools_SC_SectionEncounter[sectionID].S= WoWTools_SC_SectionEncounter[sectionID].S or {}
                        WoWTools_SC_SectionEncounter[sectionID].S[EJ_GetDifficulty()]= desc
                    end
                    self.num= self.num + 1
                    self.Name:SetText(sectionInfo.link or title)
                    --return sectionInfo.link or title
                end
            end
        end
    end

    Set_ValueText(self, startIndex, MaxSectionEncounterID)
    Save()[self.name] = startIndex


    if (counter >= 2) then
        C_Timer.After(0.1, function() S_SectionEncounter(self, startIndex + 100 +1,  0) end)
    else
        C_Timer.After(0.1, function() S_SectionEncounter(self, startIndex + 100 +1,  counter+1) end)
    end
end




function WoWeuCN_Scanner_ScanEncounterSectionAuto(startIndex, attempt, counter)
  if (startIndex > 50000) then
    WoWeuCN_Scanner_Index = 0
    return;
  end
  for difficultyId = 1, 45 do
    EJ_SetDifficulty(difficultyId)
    for i = startIndex, startIndex + 100 do
      local sectionInfo =  C_EncounterJournal.GetSectionInfo(i)
      if (sectionInfo and not sectionInfo.filteredByDifficulty) then
        WoWeuCN_Scanner_EncounterSectionData[EJ_GetDifficulty() .. 'x' .. i] = {}
        WoWeuCN_Scanner_EncounterSectionData[EJ_GetDifficulty() .. 'x' .. i]["Title"] = sectionInfo.title

        print(sectionInfo.title)
        WoWeuCN_Scanner_EncounterSectionData[EJ_GetDifficulty() .. 'x' .. i]["Description"] = sectionInfo.description
      end
    end
  end
  print(attempt)
  print('index ' .. startIndex)
  WoWeuCN_Scanner_Index = startIndex
  if (counter >= 2) then
     WoWeuCN_Scanner_wait(0.1, WoWeuCN_Scanner_ScanEncounterSectionAuto, startIndex + 100, attempt + 1, 0)
  else
     WoWeuCN_Scanner_wait(0.1, WoWeuCN_Scanner_ScanEncounterSectionAuto, startIndex, attempt + 1, counter + 1)
  end
end
]]


































local function Get_Unit_Tab(unit)
    local data= C_TooltipInfo.GetHyperlink('unit:Creature-0-0-0-0-'..unit..'-0000000000')
    if not data
        or not data.lines
        or not data.lines[1]
        or not IsCN(data.lines[1].leftText)
    then
        return
    end
    local desc
    local title
    for index, line in pairs(data.lines) do
        if index==1 then
            title= line.leftText

        elseif IsCN(line.leftText) and not line.leftText:find('等级 ') then
            desc= (desc and desc..'●' or '')..line.leftText--ActionButton.lua 中文中的●跟英文不一样
        end
    end
    if title then
        return {
            ['T']= title,
            ['D']= desc,
        }
    end
end

local function Save_Unit(self, unit)--字符
    local tab = Get_Unit_Tab(unit)
    if tab then
        WoWTools_SC_Unit[unit] = tab
        self.num= self.num+1
        return tab.T
    end
end
local function S_Unit(self, startIndex)
    if Is_StopRun(self, startIndex, MaxUnitID) then
        return
    end

    for unit = startIndex, startIndex + 100 do
        local title= Save_Unit(self, unit)
        if title then
            self.Name:SetText(title)
        end
    end

    Set_ValueText(self, startIndex, MaxUnitID)
    Save()[self.name] = startIndex

    C_Timer.After(0.1, function() S_Unit(self, startIndex + 100 + 1) end)
end






















local function Cahce_Item(itemID)
    if C_Item.GetItemInfoInstant(itemID) then
        if not C_Item.IsItemDataCachedByID(itemID) then
            C_Item.RequestLoadItemDataByID(itemID)
        else
            return true
        end
    end
end

local function S_CacheItem(self, startIndex)
    if Is_StopCahceRun(self, startIndex, MaxItemID) then
        return
    end

    for itemID = startIndex, startIndex + 100 do
        Cahce_Item(itemID)
        self.bar2:SetValue(itemID/MaxItemID*100)
        self.bar2:SetShown(true)
    end

    Save()[self.name..'Cache']= startIndex
    C_Timer.After(0.1, function() S_CacheItem(self, startIndex + 100 + 1) end)
end

--[[
C_TooltipInfo.GetHyperlink('item:212021:0:0:0:0:0:0:0')
C_Item.IsItemDataCachedByID(212021)
C_Item.RequestLoadItemDataByID(212021)
]]
local function Get_Item_Tab(itemID)
    local data= C_TooltipInfo.GetHyperlink('item:'..itemID..':0:0:0:0:0:0:0')
    if not data
        or not data.lines
        or not data.lines[1]
        or not IsCN(data.lines[1].leftText)
    then
        return
    end

    local title= C_Item.GetItemInfo(itemID) or data.lines[1].leftText
    local desc
    for index, line in pairs(data.lines) do
        local text= line.leftText
        if index>1 and IsCN(text) and (
            text:find('套装：')
            or text:find('使用：')
            or text:find('击中时可能：')
            or text:find('装备：')
            or text:find('需要：')
            or text:find('^".+"$')
            --or text:find('^用于：')
            or text:find('|cff......')
        )
        then
            desc= (desc and desc..'|n' or '')..(text:match('"(.+)"') or text)
        end
    end
    return {
        ['T']= title,
        ['D']= desc,
    }
end

local function Save_Item(self, itemID)--字符
    local tab = Get_Item_Tab(itemID)
    if tab then
        WoWTools_SC_Item[itemID] = tab
        self.num= self.num+1
        return select(2, C_Item.GetItemInfo(itemID)) or tab.T
    end
end

local function S_Item(self, startIndex)
    if Is_StopRun(self, startIndex, MaxItemID) then
        return
    end

    for itemID = startIndex, startIndex + 100 do
        local title= Cahce_Item(itemID) and Save_Item(self, itemID)
        if title then
            self.Name:SetText(title..' '..itemID)
        end
    end

    Set_ValueText(self, startIndex, MaxItemID)

    C_Timer.After(0.1, function() S_Item(self, startIndex + 100 + 1) end)
end

local function Set_Item_Event(self)
    self:RegisterEvent('ITEM_DATA_LOAD_RESULT')--ItemEventListener:AddCancelableCallback(self:GetItemID(), callbackFunction)
    self:SetScript('OnEvent', function(f, _, itemID, success)
        if itemID then
            if success then
                Save_Item(f, itemID)
            else
                C_Timer.After(1, function() Cahce_Item(itemID) end)
            end
        end
    end)
end
































--任务
local function Cahce_Quest(questID)
    if not HaveQuestData(questID) then
        C_QuestLog.RequestLoadQuestByID(questID)
    else
        return true
    end
end
local function S_CacheQuest(self, startIndex)
    if Is_StopCahceRun(self, startIndex, MaxQuestID) then
        return
    end

    for questID = startIndex, startIndex + 100 do
        Cahce_Quest(questID)
        self.bar2:SetValue(questID/MaxQuestID*100)
        self.bar2:SetShown(true)
    end

    Save()[self.name..'Cache']= startIndex
    C_Timer.After(0.1, function() S_CacheQuest(self, startIndex + 100 + 1) end)
end

local function Get_Objectives(questID)
    local obj= C_QuestLog.GetQuestObjectives(questID)
    if not obj then
        return
    end
    local tab= {}
    local find
    for index, info in pairs(obj) do
        if info.text then
            local t= info.text:match('%d+/%d+ (.+)') or info.text
            t= t:match('(.+) %(%d+%%%)') or t
            if IsCN(t) then
                tab[index]= t
                find=true
            end
        end
    end
    if find then
        return tab
    end
end

local function Get_Quest_Tab(questID)
    local data= C_TooltipInfo.GetHyperlink('quest:' .. questID)
    if not data or
        not data.lines
        or not data.lines[1]
        or not IsCN(data.lines[1].leftText)
    then
        return
    end
    local title= C_QuestLog.GetTitleForQuestID(questID) or data.lines[1].leftText
    local obj
    if data.lines[3] and IsCN(data.lines[3].leftText) then
        obj= data.lines[3].leftText
    end
    return {
        ['T']= title,
        ['O']= obj,
        ['S']= Get_Objectives(questID),
    }
end
--任务 [字符questID]={T=, O= S={}}
local function Save_Quest(self, questID)
    local tab = Get_Quest_Tab(questID)
    if tab then
        WoWTools_SC_Quest[questID] = tab
        self.num= self.num+1
        return true
    end
end

local function S_Quest(self, startIndex)
    if Is_StopRun(self, startIndex, MaxQuestID) then
        return
    end

    for questID = startIndex, startIndex + 100 do
        if Cahce_Quest(questID) and Save_Quest(self, questID) then
            self.Name:SetText(C_QuestLog.GetTitleForQuestID(questID) or ('questID '..questID))
        end
    end

    Set_ValueText(self, startIndex, MaxQuestID)
    C_Timer.After(0.1, function() S_Quest(self, startIndex + 100 + 1) end)
end


local function Set_Quest_Event(self)
    self:RegisterEvent('QUEST_DATA_LOAD_RESULT')
    self:SetScript('OnEvent', function(_, _, questID, success)
        if questID then
            if success then
                Save_Quest(self, questID)
            else
                C_Timer.After(1, function() Cahce_Quest(questID) end)
            end
        end
    end)
end


























local function Cahce_Spell(spellID)
    if not C_Spell.IsSpellDataCached(spellID) then
        C_Spell.RequestLoadSpellData(spellID)
    else
        return true
    end
end

local function S_CacheSpell(self, startIndex)
    if Is_StopCahceRun(self, startIndex, MaxSpellID) then
        return
    end

    for spellID = startIndex, startIndex + 100 do
        Cahce_Spell(spellID)
        self.bar2:SetValue(spellID/MaxSpellID*100)
        self.bar2:SetShown(true)
    end

    Save()[self.name..'Cache']= startIndex
    C_Timer.After(0.1, function() S_CacheSpell(self, startIndex + 100 + 1) end)
end

--[[
--local data= C_TooltipInfo.GetHyperlink('spell:'.. spellID)
]]
local function Get_Spell_Tab(spellID)
    local title= C_Spell.GetSpellName(spellID)
    if IsCN(title) then
        local desc
        local d= C_Spell.GetSpellDescription(spellID)
        if IsCN(d) then
            desc= d
        end
        return {
            ['T']= title,
            ['D']= desc,
        }
    end
end


local function Save_Spell(self, spellID)
    local tab = Get_Spell_Tab(spellID)
    if tab then
        WoWTools_SC_Spell[spellID] = tab
        self.num= self.num+1
        return tab.T
    end
end


local function S_Spell(self, startIndex)
    if Is_StopRun(self, startIndex, MaxSpellID) then
        return
    end
    for spellID = startIndex, startIndex + 100 do
        local title= Cahce_Spell(spellID) and Save_Spell(self, spellID)
        if title then
            title= C_Spell.GetSpellLink(spellID) or title
            self.Name:SetText(title..' '.. spellID)
        end
    end
    Set_ValueText(self, startIndex, MaxSpellID)
    C_Timer.After(0.1, function() S_Spell(self, startIndex + 100 + 1) end)
end

local function Set_Spell_Event(self)
    self:RegisterEvent('SPELL_DATA_LOAD_RESULT')
    self:SetScript('OnEvent', function(_, _, spellID, success)
        if spellID and spellID< MinSpell2ID then
            if success then
                Save_Spell(self, spellID)
            else
                C_Timer.After(1, function() Cahce_Spell(spellID) end)
            end
        end
    end)
end





















local function Cahce_Spell2(spellID)
    if not C_Spell.IsSpellDataCached(spellID) then
        C_Spell.RequestLoadSpellData(spellID)
    else
        return true
    end
end

local function S_CacheSpell2(self, startIndex)
    if Is_StopCahceRun(self, startIndex, MaxSpell2ID) then
        return
    end

    for spellID = startIndex, startIndex + 100 do
        Cahce_Spell2(spellID)
        self.bar2:SetValue(spellID/MaxSpell2ID*100)
        self.bar2:SetShown(true)
    end

    Save()[self.name..'Cache']= startIndex
    C_Timer.After(0.1, function() S_CacheSpell2(self, startIndex + 100 + 1) end)
end

local function Get_Spell2_Tab(spellID)
    local title= C_Spell.GetSpellName(spellID)
    if IsCN(title) then
        local desc
        local d= C_Spell.GetSpellDescription(spellID)
        if IsCN(d) then
            desc= d
        end
        return {
            ['T']= title,
            ['D']= desc,
        }
    end
end



local function Save_Spell2(self, spellID)
    local tab = Get_Spell2_Tab(spellID)
    if tab then
        WoWTools_SC_Spell2[spellID] = tab
        self.num= self.num+1
        return tab.T
    end
end


local function S_Spell2(self, startIndex)
    if Is_StopRun(self, startIndex, MaxSpell2ID) then
        return
    end
    for spellID = startIndex, startIndex + 100 do
        local title= Cahce_Spell2(spellID) and Save_Spell2(self, spellID)
        if title then
            title= C_Spell.GetSpellLink(spellID) or title
            self.Name:SetText(title..' '.. spellID)
        end
    end
    Set_ValueText(self, startIndex, MaxSpell2ID)
    C_Timer.After(0.1, function() S_Spell2(self, startIndex + 100 + 1) end)
end

local function Set_Spell2_Event(self)
    self:RegisterEvent('SPELL_DATA_LOAD_RESULT')
    self:SetScript('OnEvent', function(_, _, spellID, success)
        if spellID and spellID>=MinSpell2ID then
            if success then
                Save_Spell2(self, spellID)
            else
                C_Timer.After(1, function() Cahce_Spell2(spellID) end)
            end
        end
    end)
end





















local function Cahce_Achievement(achievementID)
    GetAchievementInfo(achievementID)
end

local function S_CacheAchievement(self, startIndex)
    if Is_StopCahceRun(self, startIndex, MaxAchievementID) then
        return
    end
    for AchievementID = startIndex, startIndex + 100 do
        Cahce_Achievement(AchievementID)
        self.bar2:SetValue(AchievementID/MaxAchievementID*100)
        self.bar2:SetShown(true)
    end
    Save()[self.name..'Cache']= startIndex
    C_Timer.After(0.1, function() S_CacheAchievement(self, startIndex + 100 + 1) end)
end

local function Get_Achievement_Tab(achievementID)
    local _, title, _, _, _, _, _, desc, _, _, reward = GetAchievementInfo(achievementID)
    if IsCN(title) then
        local d,r
        if IsCN(desc) then
            d= desc--概述
        end
        if IsCN(reward) then
            r= reward--奖励
        end
        local s, find
        local numCriteria= GetAchievementNumCriteria(achievementID) or 0--条件
        if numCriteria>0 then
            local t={}
            for index = 1, numCriteria do
                local criteriaString = GetAchievementCriteriaInfo(achievementID, index)
                if IsCN(criteriaString) then
                    t[index]= criteriaString
                    find= true
                end
            end
            if find then
                s= t
            end
        end
        return {
            ['T']= title,
            ['D']= d,
            ['R']= r,
            ['S']= s,
        }
    end
end


local function Save_Achievement(self, achievementID)
    local tab = Get_Achievement_Tab(achievementID)
    if tab then
        WoWTools_SC_Achievement[achievementID] = tab
        self.num= self.num+1
        return tab.T
    end
end


local function S_Achievement(self, startIndex)
    if Is_StopRun(self, startIndex, MaxAchievementID) then
        return
    end
    for achievementID = startIndex, startIndex + 100 do
        Cahce_Achievement(achievementID)
        local title= Save_Achievement(self, achievementID)
        if title then
            self.Name:SetText(select(2, GetAchievementInfo(achievementID)) or title)
        end
    end
    Set_ValueText(self, startIndex, MaxAchievementID)
    C_Timer.After(0.1, function() S_Achievement(self, startIndex + 100 + 1) end)
end






























local function clear_data(name)
    Save()[name]= nil
    Save()[name..'Cache']= nil
    Save()[name..'Ver']= nil

    _G['WoWTools_SC_'..name]= {}

    local self= _G['WoWToolsSC'..name..'Button']
    if not self.isStop then
        self:settings()
    else
        self.time=nil
    end

    self.bar:SetValue(0)
    self.Value:SetText('')
    self.Ver:SetText('')

    print('清除数据', name or '全部', '|cnGREEN_FONT_COLOR:完成')
end

StaticPopupDialogs['WoWTools_SC']={
    text = '你确定要|n清除 |cnGREEN_FONT_COLOR:%s|r 数据 吗？%s',
    button1 = '确定', button2 = '取消',
    whileDead=true, hideOnEscape=true, exclusive=true, showAlert=true, acceptDelay=1,
    OnAccept=function(_, data)
        if data then
            clear_data(data)
        else
            do
                for _, name in pairs(Buttons) do
                    clear_data(name)
                end
            end
            C_UI.Reload()
        end
    end
}













local y= -70
local function Create_Button(name, tab)
    local btn= CreateFrame('Button', 'WoWToolsSC'..name..'Button', Frame)

    btn.name= name
    btn.func= tab.func

    if tab.texture then
        btn:SetNormalTexture(tab.texture)
    else
        btn:SetNormalAtlas(tab.atlas or 'common-dropdown-icon-next')
    end
    btn:SetPushedAtlas('PetList-ButtonSelect')
    btn:SetHighlightAtlas('PetList-ButtonHighlight')
    btn:SetSize(23, 23)
    btn:SetPoint('TOPRIGHT', -50, y)
    btn:SetScript('OnLeave', function() GameTooltip:Hide() end)
    btn:SetScript('OnEnter', function(self)
        GameTooltip:SetOwner(self, 'ANCHOR_RIGHT')
        GameTooltip:SetText((self.isStop and '|cnGREEN_FONT_COLOR:运行' or '|cff626262暂停').. '|r '..self.name)
        GameTooltip:AddLine('运行前，请关闭所有插件')
        if not LOCALE_zhCN then
            GameTooltip:AddLine('|cnGREEN_FONT_COLOR:需求 简体中文')
        end
        if Save()[self.name..'Data']  then
            for _, t in pairs (Save()[self.name..'Data']) do
                GameTooltip:AddLine(t)
            end
        elseif tab.tooltip then
            GameTooltip:AddLine(tab.tooltip)
        end
        GameTooltip:Show()
    end)
    btn:SetScript('OnMouseDown', function(self)
        self:settings()
        if not self.isStop then
            if self.name=='Spell' then
                C_Spell.RequestLoadSpellData(258483)
            end
            local min= Save()[self.name] or (self.name=='Spell2' and MinSpell2ID or 1)
            self.func(self, min)
        end
    end)

    btn.bar= CreateFrame('StatusBar', nil, btn)
    btn.bar:SetPoint('RIGHT', btn, 'LEFT', -2, 0)
    btn.bar:SetSize(Frame:GetWidth()-55-23*3, 18)
    btn.bar:SetStatusBarTexture('UI-HUD-UnitFrame-Player-PortraitOff-Bar-Focus')
    btn.bar:SetAlpha(0.8)
    btn.bar:SetMinMaxValues(0, 100)
    btn.bar:SetValue(0)
    btn.bar.texture= btn.bar:CreateTexture(nil, "BACKGROUND")
    btn.bar.texture:SetAllPoints(btn.bar)
    btn.bar.texture:SetAtlas('UI-HUD-UnitFrame-Player-PortraitOff-Bar-TempHPLoss-2x')

    btn.bar2= CreateFrame('StatusBar', nil, btn)
    btn.bar2:SetPoint('TOPLEFT', btn.bar, 'BOTTOMLEFT')
    btn.bar2:SetPoint('TOPRIGHT', btn.bar, 'BOTTOMRIGHT')
    btn.bar2:SetHeight(4)
    btn.bar2:SetStatusBarTexture('UI-HUD-UnitFrame-Player-PortraitOn-Bar-Health')
    btn.bar2:SetMinMaxValues(0, 100)
    btn.bar2:SetValue(0)
    btn.bar2:Hide()

    btn.Value= btn.bar:CreateFontString(nil, "OVERLAY")
    btn.Value:SetFontObject("GameFontWhite")
    btn.Value:SetPoint('RIGHT', btn.bar)
    btn.Value:SetText(MK(Save()[name]) or 0)

    btn.Name= btn.bar:CreateFontString(nil, "OVERLAY")
    btn.Name:SetFontObject('GameFontWhite')
    btn.Name:SetPoint('LEFT', btn.bar)
    btn.Name:SetText(name)

    btn.Ver=  btn.bar:CreateFontString(nil, "OVERLAY")
    btn.Ver:SetFontObject("GameFontWhite")
    btn.Ver:SetPoint('CENTER', btn.bar)
    btn.Ver:EnableMouse(true)
    btn.Ver:SetScript('OnLeave', function(self) GameTooltip:Hide() self:SetAlpha(1) end)
    btn.Ver:SetScript('OnEnter', function(self)
        GameTooltip:SetOwner(self, 'ANCHOR_RIGHT')
        GameTooltip:SetText(self:GetParent():GetParent().name..': 数据版本 '..self:GetText())
        GameTooltip:Show()
        self:SetAlpha(0.5)
    end)

    btn.clear= CreateFrame('Button', nil, btn)
    btn.clear:SetNormalAtlas('bags-button-autosort-up')
    btn.clear:SetPushedAtlas('PetList-ButtonSelect')
    btn.clear:SetHighlightAtlas('PetList-ButtonHighlight')
    btn.clear:SetPoint('RIGHT', btn.bar, 'LEFT', -2, 0)
    btn.clear:SetSize(23,23)
    btn.clear:SetScript('OnLeave', function() GameTooltip:Hide() end)
    btn.clear:SetScript('OnEnter', function(self)
        GameTooltip:SetOwner(self, 'ANCHOR_RIGHT')
        GameTooltip:SetText('清除 '..self:GetParent().name)
        GameTooltip:Show()
    end)
    btn.clear:SetScript('OnMouseDown', function(self)
        local p= self:GetParent()
        local n= p.name
        if not p.isStop then
            p:settings()
        else
            p.time=nil
        end
        StaticPopup_Show('WoWTools_SC', n, '', n)
    end)

    if tab.cahce then
        btn.cahce= CreateFrame('Button', nil, btn)
        btn.cahce:SetPushedAtlas('PetList-ButtonSelect')
        btn.cahce:SetHighlightAtlas('PetList-ButtonHighlight')
        btn.cahce:SetPoint('LEFT', btn, 'RIGHT', -2, 0)
        btn.cahce:SetSize(23,23)
        btn.cahce.func= tab.cahce
        btn.cahce.name= name
        function btn.cahce:set_tooltip()
            local p= self:GetParent()
            if not p then return end
            GameTooltip:SetOwner(self, 'ANCHOR_RIGHT')
            GameTooltip:SetText((p.isCahceStop and '|cff626262' or '|cnGREEN_FONT_COLOR:')..'加载数据 '..self.name)
            local clock= Save()[self.name..'CacheTime']
            if clock then
                GameTooltip:AddLine('上次运行：'..clock)
            end
            if p.cahceTime then
                GameTooltip:AddLine('已运行：'..SecondsToClock(GetTime()-p.cahceTime))
            end
            GameTooltip:Show()
        end
        btn.cahce:SetScript('OnLeave', function() GameTooltip:Hide() end)
        btn.cahce:SetScript('OnEnter', function(self)
           self:set_tooltip()
        end)
        function btn.cahce:settings()
            if not self:GetParent().isCahceStop then
                self:SetNormalAtlas('Perks-PreviewOn')
            else
                self:SetNormalAtlas('Perks-PreviewOff-Hover')
            end
        end
        btn.isCahceStop= true
        btn.cahce:settings()
        function btn.cahce:run()
            local p= self:GetParent()
            p.isCahceStop= not p.isCahceStop and true or false
            self.func(p, Save()[self.name..'Cache'] or 1)
            p.cahceTime= not p.isCahceStop and GetTime() or nil
            self:settings()
            self:set_tooltip()
        end
        btn.cahce:SetScript('OnMouseDown', function(self)
            self:run()
        end)
        if Save()[name..'Cache'] then
            btn.cahce:run()
        end
    end

    function btn:settings()
        self.isStop= not self.isStop and true or nil
        if self.isStop then
            self.num= 0
            self:SetNormalAtlas('common-dropdown-icon-next')
            self.time=nil
        else
            self:SetNormalAtlas('common-dropdown-icon-stop')
            self.num= Save()[self.name] or 0
            self.time= GetTime()
        end

        self.Ver:SetText(Save()[self.name..'Ver'] or '')
    end
    btn:settings()

    if name=='Quest' then
        Set_Quest_Event(btn)

    elseif name=='Item' then
        Set_Item_Event(btn)

    elseif name=='Spell' then
        Set_Spell_Event(btn)

    elseif name=='Spell2' then
        Set_Spell2_Event(btn)
    end

    y= y- 23- 8
end













local function Init()
    Frame= CreateFrame('Frame', 'WoWTools_SC_Frame', UIParent)
    Frame:SetFrameStrata('HIGH')
    Frame:SetFrameLevel(501)
    Frame:SetSize(520, 400)
    Frame:RegisterEvent('PLAYER_REGEN_DISABLED')
    Frame:RegisterUnitEvent('PLAYER_FLAGS_CHANGED', 'player')
    Frame:SetScript('OnEvent', function(_,  event)
        if event=='PLAYER_REGEN_DISABLED' then
            for _, name in pairs(Buttons) do
                local btn= _G['WoWToolsSC'..name..'Button']
                if not btn.isStop and not btn.isCahceStop then
                    btn:settings()
                end
            end

        elseif UnitIsAFK('player') then
            --[[local isRun= false
            for _, name in pairs(Buttons) do
                local btn= _G['WoWToolsSC'..name..'Button']
                if not btn.isStop and not btn.isCahceStop then
                    isRun= true
                    break
                end
            end
            if isRun then]]
                C_MountJournal.SummonByID(0)
            
        end
    end)
    Frame:SetMovable(true)
    Frame:RegisterForDrag("LeftButton", "RightButton")
    Frame:SetScript("OnDragStart", function(self) self:StartMoving() end)
    Frame:SetScript("OnDragStop", function(self)
        ResetCursor()
        self:StopMovingOrSizing()
--确认框架中心点，在屏幕内
        local isInSchermo= true
        local centerX, centerY = self:GetCenter()
        local screenWidth, screenHeight = UIParent:GetWidth(), UIParent:GetHeight()
        if not centerX or not centerY then
            isInSchermo= false
        end
        if centerX < 0 or centerX > screenWidth or centerY < 0 or centerY > screenHeight then
            isInSchermo = false
        end
        if isInSchermo then
            Save().point= {Frame:GetPoint(1)}
            Save().point[2]= nil
        end
    end)
    local point= Save().point
    if point and point[1] then
        Frame:SetPoint(point[1], UIParent, point[3], point[4], point[5])
    else
        Frame:SetPoint('CENTER')
    end
    Frame:SetScript("OnMouseDown", function() SetCursor('UI_MOVE_CURSOR') end)
    Frame:SetScript("OnMouseUp", function() ResetCursor() end)
    Frame:SetScript("OnLeave", function() ResetCursor() end)

    Frame.Border= CreateFrame('Frame', nil, Frame, 'DialogBorderTemplate')
    Frame.CloseButton=CreateFrame('Button', 'WoWTools_SC_FrameCloseButton', Frame, 'UIPanelCloseButton')--SharedUIPanelTemplates.xml
    Frame.CloseButton:SetPoint('TOPRIGHT')
    Frame.Header= CreateFrame('Frame', nil, Frame, 'DialogHeaderTemplate')--DialogHeaderMixin
    Frame.Header:Setup(addName)

    local note= Frame:CreateFontString(nil, "OVERLAY")
    note:SetFontObject('GameFontNormal')
    note:SetPoint('BOTTOM', 0, 12)
    note:SetText(
        '当前游戏版本 '..Ver
        ..'|n因为数据太大，登入后会出现错误'
        ..(LOCALE_zhCN and '' or '|n|cnRED_FONT_COLOR:需求 简体中文|r')
        ..'|n登出后，需要备份：'
        ..'|n|cffffffff数据：|rWTF\\Account\\...\\SavedVariables\\WoWTools_Chinese_Scanner.lua'
    )



    local clear= CreateFrame('Button', 'WoWToolsSCClearDataButton', Frame, 'UIPanelButtonTemplate')
    clear:SetSize(150, 23)
    --clear:SetPoint('TOP', Frame.Header, 'BOTTOM', 0, -10)
    clear:SetPoint('BOTTOMLEFT', 12, 23)
    clear:SetText('|A:bags-button-autosort-up:0:0|a清除所有数据')
    clear:SetScript('OnMouseDown', function()
        for _, name in pairs(Buttons) do
            local btn= _G['WoWToolsSC'..name..'Button']
            if not btn.isStop then
                btn:settings()
            else
                btn.time=nil
            end
        end
        StaticPopup_Show('WoWTools_SC', '全部', '|n|n|cnGREEN_FONT_COLOR:重新加载UI', nil)
    end)


    local reload= CreateFrame('Button', 'WoWToolsSCReloadButton', Frame, 'UIPanelButtonTemplate')
    reload:SetSize(150, 23)
    reload:SetText('重新加载UI')
    reload:SetScript('OnClick', C_UI.Reload)
    reload:SetPoint('BOTTOMRIGHT', -12, 23)

do
    for name, tab in pairs({
        ['Encounter']= {func=S_Encounter, tooltip='1k103 02:04'},
        ['SectionEncounter']= {func=S_SectionEncounter, tooltip='6w3134 00:50'},
        ['Unit']= {func=S_Unit, tooltip='10w7939 19:48'},
        ['Quest']= {func=S_Quest, cahce=S_CacheQuest, tooltip='1w7340 04:08'},
        ['Item']= {func=S_Item, cahce=S_CacheItem, tooltip='16w2656 05:50'},
        ['Spell']= {func=S_Spell, cahce=S_CacheSpell, tooltip='30w0234 01:22:19', atlas='UI-HUD-MicroMenu-SpellbookAbilities-Mouseover'},
        ['Spell2']= {func=S_Spell2, cahce=S_CacheSpell2},
        ['Achievement']= {func=S_Achievement, cahce=S_CacheAchievement, tooltip='1w2058 04:29', atlas='UI-Achievement-Shield-NoPoints'},
    }) do
        Create_Button(name, tab)

        table.insert(Buttons, name)
    end
end

    if not InCombatLockdown() then
        --[[if not CollectionsJournal then
            CollectionsJournal_LoadUI()
        end]]

        if not PlayerSpellsFrame then
            PlayerSpellsFrame_LoadUI()
        end

        if not AchievementFrame then
            AchievementFrame_LoadUI()
        end

        if not EncounterJournal then
            EncounterJournal_LoadUI()
        end
    end

    do
        for _, itemID in pairs(ItemSetTab) do
            Cahce_Item(itemID)
        end
    end
    ItemSetTab= nil

    Init=function()end
end













EventRegistry:RegisterFrameEventAndCallback("ADDON_LOADED", function(owner, arg1)
    if arg1~='WoWTools_Chinese_Scanner' then
        return
    end

    WoWTools_SC= WoWTools_SC or {}

    WoWTools_SC_Achievement = WoWTools_SC_Achievement or {}
    WoWTools_SC_Quest = WoWTools_SC_Quest or {}
    WoWTools_SC_Encounter= WoWTools_SC_Encounter or {}
    WoWTools_SC_SectionEncounter= WoWTools_SC_SectionEncounter or {}

    WoWTools_SC_Item= WoWTools_SC_Item or {}
    WoWTools_SC_Spell= WoWTools_SC_Spell or {}
    WoWTools_SC_Spell2= WoWTools_SC_Spell2 or {}
    WoWTools_SC_Unit= WoWTools_SC_Unit or {}


    EventRegistry:UnregisterCallback('ADDON_LOADED', owner)
end)



EventRegistry:RegisterFrameEventAndCallback("PLAYER_ENTERING_WORLD", function(owner)
    Init()
    EventRegistry:UnregisterCallback('PLAYER_ENTERING_WORLD', owner)
end)